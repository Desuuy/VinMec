-- =============================================
-- KI·ªÇM TRA V√Ä TH√äM CH·ª®C NƒÇNG QU√äN M·∫¨T KH·∫®U V√ÄO DATABASE
-- =============================================

-- Ki·ªÉm tra database hi·ªán t·∫°i
SELECT DB_NAME() AS CurrentDatabase
GO

-- 1. Ki·ªÉm tra b·∫£ng RESET_TOKENS c√≥ t·ªìn t·∫°i kh√¥ng
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RESET_TOKENS]') AND type in (N'U'))
BEGIN
    PRINT '‚úÖ B·∫£ng RESET_TOKENS ƒë√£ t·ªìn t·∫°i'
    
    -- Hi·ªÉn th·ªã th√¥ng tin b·∫£ng
    SELECT 
        COLUMN_NAME,
        DATA_TYPE,
        IS_NULLABLE,
        COLUMN_DEFAULT
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'RESET_TOKENS'
    ORDER BY ORDINAL_POSITION;
END
ELSE
BEGIN
    PRINT '‚ùå B·∫£ng RESET_TOKENS ch∆∞a t·ªìn t·∫°i - ƒêang t·∫°o...'
    
    -- T·∫°o b·∫£ng RESET_TOKENS
    CREATE TABLE RESET_TOKENS (
        ID INT IDENTITY(1,1) PRIMARY KEY,
        MaND INT NOT NULL,
        Token NVARCHAR(10) NOT NULL,
        CreatedAt DATETIME NOT NULL DEFAULT GETDATE(),
        ExpiresAt DATETIME NOT NULL,
        IsUsed BIT NOT NULL DEFAULT 0,
        FOREIGN KEY (MaND) REFERENCES NGUOIDUNG(MaND)
    )
    
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng RESET_TOKENS th√†nh c√¥ng!'
END
GO

-- 2. Ki·ªÉm tra v√† t·∫°o Stored Procedures
PRINT '--- KI·ªÇM TRA STORED PROCEDURES ---'

-- CreateResetToken
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CreateResetToken]') AND type in (N'P', N'PC'))
BEGIN
    PRINT '‚úÖ Stored Procedure CreateResetToken ƒë√£ t·ªìn t·∫°i'
    DROP PROCEDURE [dbo].[CreateResetToken]
END
GO

CREATE PROCEDURE CreateResetToken
    @MaND INT,
    @Token NVARCHAR(10),
    @ExpiresInMinutes INT = 15
AS
BEGIN
    BEGIN TRY
        -- X√≥a token c≈© n·∫øu c√≥
        DELETE FROM RESET_TOKENS WHERE MaND = @MaND
        
        -- T·∫°o token m·ªõi
        INSERT INTO RESET_TOKENS (MaND, Token, CreatedAt, ExpiresAt, IsUsed)
        VALUES (@MaND, @Token, GETDATE(), DATEADD(MINUTE, @ExpiresInMinutes, GETDATE()), 0)
        
        SELECT @@ROWCOUNT AS RowsAffected
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        RAISERROR (@ErrorMessage, 16, 1)
    END CATCH
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o Stored Procedure CreateResetToken'

-- ValidateResetToken
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ValidateResetToken]') AND type in (N'P', N'PC'))
BEGIN
    PRINT '‚úÖ Stored Procedure ValidateResetToken ƒë√£ t·ªìn t·∫°i'
    DROP PROCEDURE [dbo].[ValidateResetToken]
END
GO

CREATE PROCEDURE ValidateResetToken
    @PhoneNumber NVARCHAR(20),
    @Token NVARCHAR(10)
AS
BEGIN
    SELECT 
        rt.MaND,
        rt.IsUsed,
        rt.ExpiresAt,
        nd.TenND
    FROM RESET_TOKENS rt
    INNER JOIN NGUOIDUNG nd ON rt.MaND = nd.MaND
    WHERE nd.SDT = @PhoneNumber 
        AND rt.Token = @Token 
        AND rt.IsUsed = 0 
        AND rt.ExpiresAt > GETDATE()
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o Stored Procedure ValidateResetToken'

-- ResetUserPassword
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ResetUserPassword]') AND type in (N'P', N'PC'))
BEGIN
    PRINT '‚úÖ Stored Procedure ResetUserPassword ƒë√£ t·ªìn t·∫°i'
    DROP PROCEDURE [dbo].[ResetUserPassword]
END
GO

CREATE PROCEDURE ResetUserPassword
    @MaND INT,
    @NewPassword NVARCHAR(255),
    @Token NVARCHAR(10)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
        
        -- C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        UPDATE NGUOIDUNG 
        SET Password = @NewPassword 
        WHERE MaND = @MaND
        
        -- ƒê√°nh d·∫•u token ƒë√£ s·ª≠ d·ª•ng
        UPDATE RESET_TOKENS 
        SET IsUsed = 1 
        WHERE MaND = @MaND AND Token = @Token
        
        COMMIT TRANSACTION
        
        SELECT @@ROWCOUNT AS RowsAffected
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE()
        RAISERROR (@ErrorMessage, 16, 1)
    END CATCH
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o Stored Procedure ResetUserPassword'

-- 3. T·∫°o Indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
PRINT '--- T·∫†O INDEXES ---'

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_RESET_TOKENS_MaND')
BEGIN
    CREATE INDEX IX_RESET_TOKENS_MaND ON RESET_TOKENS(MaND)
    PRINT '‚úÖ ƒê√£ t·∫°o Index IX_RESET_TOKENS_MaND'
END
ELSE
BEGIN
    PRINT '‚úÖ Index IX_RESET_TOKENS_MaND ƒë√£ t·ªìn t·∫°i'
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_RESET_TOKENS_Token')
BEGIN
    CREATE INDEX IX_RESET_TOKENS_Token ON RESET_TOKENS(Token)
    PRINT '‚úÖ ƒê√£ t·∫°o Index IX_RESET_TOKENS_Token'
END
ELSE
BEGIN
    PRINT '‚úÖ Index IX_RESET_TOKENS_Token ƒë√£ t·ªìn t·∫°i'
END

-- 4. Ki·ªÉm tra d·ªØ li·ªáu m·∫´u
PRINT '--- KI·ªÇM TRA D·ªÆ LI·ªÜU ---'

-- Ki·ªÉm tra b·∫£ng NGUOIDUNG
DECLARE @TotalUsers INT
SELECT @TotalUsers = COUNT(*) FROM NGUOIDUNG
PRINT 'üìä T·ªïng s·ªë ng∆∞·ªùi d√πng trong h·ªá th·ªëng: ' + CAST(@TotalUsers AS NVARCHAR(10))

-- Ki·ªÉm tra b·∫£ng RESET_TOKENS
DECLARE @TotalTokens INT
SELECT @TotalTokens = COUNT(*) FROM RESET_TOKENS
PRINT 'üîë T·ªïng s·ªë token reset: ' + CAST(@TotalTokens AS NVARCHAR(10))

-- 5. Test Stored Procedures
PRINT '--- TEST STORED PROCEDURES ---'

-- Test t·∫°o token (thay MaND = 1 n·∫øu c√≥ user)
DECLARE @TestMaND INT = 1
DECLARE @TestToken NVARCHAR(10) = '123456'

-- Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
IF EXISTS (SELECT 1 FROM NGUOIDUNG WHERE MaND = @TestMaND)
BEGIN
    EXEC CreateResetToken @MaND = @TestMaND, @Token = @TestToken
    PRINT '‚úÖ Test t·∫°o token th√†nh c√¥ng cho MaND = ' + CAST(@TestMaND AS NVARCHAR(10))
    
    -- X√≥a token test
    DELETE FROM RESET_TOKENS WHERE MaND = @TestMaND AND Token = @TestToken
    PRINT 'üßπ ƒê√£ x√≥a token test'
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Kh√¥ng c√≥ user v·ªõi MaND = ' + CAST(@TestMaND AS NVARCHAR(10)) + ' ƒë·ªÉ test'
END

PRINT '============================================='
PRINT 'üéâ HO√ÄN T·∫§T C√ÄI ƒê·∫∂T CH·ª®C NƒÇNG QU√äN M·∫¨T KH·∫®U!'
PRINT '============================================='
PRINT '‚úÖ B·∫£ng RESET_TOKENS ƒë√£ s·∫µn s√†ng'
PRINT '‚úÖ 3 Stored Procedures ƒë√£ ƒë∆∞·ª£c t·∫°o'
PRINT '‚úÖ Indexes ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u'
PRINT 'üöÄ B·∫°n c√≥ th·ªÉ test ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u ngay!' 