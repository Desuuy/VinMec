-- =============================================
-- STORED PROCEDURES CHO CH·ª®C NƒÇNG QU√äN M·∫¨T KH·∫®U
-- =============================================

-- 1. T·∫°o b·∫£ng RESET_TOKENS (n·∫øu ch∆∞a c√≥)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RESET_TOKENS]') AND type in (N'U'))
BEGIN
    CREATE TABLE RESET_TOKENS (
        ID INT IDENTITY(1,1) PRIMARY KEY,
        MaND INT NOT NULL,
        Token NVARCHAR(10) NOT NULL,
        CreatedAt DATETIME NOT NULL DEFAULT GETDATE(),
        ExpiresAt DATETIME NOT NULL,
        IsUsed BIT NOT NULL DEFAULT 0
    )
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng RESET_TOKENS'
END
GO

-- 2. Stored Procedure: T·∫°o token reset password
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CreateResetToken]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[CreateResetToken]
GO

CREATE PROCEDURE CreateResetToken
    @MaND INT,
    @Token NVARCHAR(10),
    @ExpiresInMinutes INT = 15
AS
BEGIN
    -- X√≥a token c≈© n·∫øu c√≥
    DELETE FROM RESET_TOKENS WHERE MaND = @MaND
    
    -- T·∫°o token m·ªõi
    INSERT INTO RESET_TOKENS (MaND, Token, CreatedAt, ExpiresAt, IsUsed)
    VALUES (@MaND, @Token, GETDATE(), DATEADD(MINUTE, @ExpiresInMinutes, GETDATE()), 0)
    
    SELECT @@ROWCOUNT AS RowsAffected
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o CreateResetToken'

-- 3. Stored Procedure: Ki·ªÉm tra token h·ª£p l·ªá
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ValidateResetToken]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[ValidateResetToken]
GO

CREATE PROCEDURE ValidateResetToken
    @PhoneNumber NVARCHAR(20),
    @Token NVARCHAR(10)
AS
BEGIN
    SELECT 
        rt.MaND,
        rt.IsUsed,
        rt.ExpiresAt,
        nd.TenND
    FROM RESET_TOKENS rt
    INNER JOIN NGUOIDUNG nd ON rt.MaND = nd.MaND
    WHERE nd.SDT = @PhoneNumber 
        AND rt.Token = @Token 
        AND rt.IsUsed = 0 
        AND rt.ExpiresAt > GETDATE()
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o ValidateResetToken'

-- 4. Stored Procedure: Reset password
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ResetUserPassword]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[ResetUserPassword]
GO

CREATE PROCEDURE ResetUserPassword
    @MaND INT,
    @NewPassword NVARCHAR(255),
    @Token NVARCHAR(10)
AS
BEGIN
    BEGIN TRANSACTION
    
    -- C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    UPDATE NGUOIDUNG 
    SET Password = @NewPassword 
    WHERE MaND = @MaND
    
    -- ƒê√°nh d·∫•u token ƒë√£ s·ª≠ d·ª•ng
    UPDATE RESET_TOKENS 
    SET IsUsed = 1 
    WHERE MaND = @MaND AND Token = @Token
    
    COMMIT TRANSACTION
    
    SELECT @@ROWCOUNT AS RowsAffected
END
GO
PRINT '‚úÖ ƒê√£ t·∫°o ResetUserPassword'

-- 5. T·∫°o Indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_RESET_TOKENS_MaND')
    CREATE INDEX IX_RESET_TOKENS_MaND ON RESET_TOKENS(MaND)
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_RESET_TOKENS_Token')
    CREATE INDEX IX_RESET_TOKENS_Token ON RESET_TOKENS(Token)
GO

PRINT '‚úÖ ƒê√£ t·∫°o Indexes'

-- 6. Test procedures
PRINT '--- TEST PROCEDURES ---'

-- Test t·∫°o token
DECLARE @TestMaND INT = 1
DECLARE @TestToken NVARCHAR(10) = '123456'

-- Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
IF EXISTS (SELECT 1 FROM NGUOIDUNG WHERE MaND = @TestMaND)
BEGIN
    EXEC CreateResetToken @MaND = @TestMaND, @Token = @TestToken
    PRINT '‚úÖ Test t·∫°o token th√†nh c√¥ng cho MaND = ' + CAST(@TestMaND AS NVARCHAR(10))
    
    -- X√≥a token test
    DELETE FROM RESET_TOKENS WHERE MaND = @TestMaND AND Token = @TestToken
    PRINT 'üßπ ƒê√£ x√≥a token test'
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è Kh√¥ng c√≥ user v·ªõi MaND = ' + CAST(@TestMaND AS NVARCHAR(10)) + ' ƒë·ªÉ test'
END

PRINT '============================================='
PRINT 'üéâ HO√ÄN T·∫§T! 3 STORED PROCEDURES ƒê√É S·∫¥N S√ÄNG!'
PRINT '============================================='
PRINT '1. CreateResetToken - T·∫°o token reset'
PRINT '2. ValidateResetToken - Ki·ªÉm tra token'
PRINT '3. ResetUserPassword - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u'
PRINT 'üöÄ B·∫°n c√≥ th·ªÉ test ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u ngay!' 